{"version":3,"sources":["../node_modules/@coreui/icons/js/free/cil-cloud-download.js","app/seller/views/statistic/Statistic.js"],"names":["cilCloudDownload","antIcon","style","fontSize","spin","WidgetsDropdown","lazy","Statistic","useState","statistics","setStatistics","totalAmount","setTotalAmount","orderCount","setOrderCount","listShop","setListShop","shopId","setShopId","loading","setLoading","useEffect","getRevenueShop","from","moment","subtract","to","then","respone","data","getShops","response","getUserInformation","getRevenue","_id","className","id","onChange","e","target","value","map","shop","name","indicator","spinning","sm","numberSeparator","color","icon","active","height","marginTop","labels","statistic","date","datasets","label","backgroundColor","hexToRgba","getStyle","borderColor","pointHoverBackgroundColor","borderWidth","fill","options","maintainAspectRatio","plugins","legend","display","scales","x","grid","drawOnChartArea","y","ticks","beginAtZero","maxTicksLimit","stepSize","Math","ceil","max","elements","line","tension","point","radius","hitRadius","hoverRadius","hoverBorderWidth"],"mappings":"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","file":"static/js/16.73c36d7d.chunk.js","sourcesContent":["export const cilCloudDownload = [\"512 512\",\"<polygon fill='var(--ci-primary-color, currentColor)' points='272 434.744 272 209.176 240 209.176 240 434.744 188.118 382.862 165.49 405.489 256 496 346.51 405.489 323.882 382.862 272 434.744' class='ci-primary'/><path fill='var(--ci-primary-color, currentColor)' d='M400,161.176c0-79.4-64.6-144-144-144s-144,64.6-144,144a96,96,0,0,0,0,192h80v-32H112a64,64,0,0,1,0-128h32v-32a112,112,0,0,1,224,0v32h32a64,64,0,0,1,0,128H320v32h80a96,96,0,0,0,0-192Z' class='ci-primary'/>\"]","import React, { lazy, useState, useEffect } from 'react'\nimport { CButton, CButtonGroup, CCard, CCardBody, CCardFooter, CCol, CRow } from '@coreui/react'\nimport { CChartLine } from '@coreui/react-chartjs'\nimport { getStyle, hexToRgba } from '@coreui/utils'\nimport { cilCloudDownload } from '@coreui/icons'\nimport { getUserInformation } from '../../../../services/api/customerApi'\nimport { getRevenue, getRevenueShop } from '../../../../services/api/sellerApi'\nimport { CFormSelect } from '@coreui/react'\nimport { getShops } from '../../../../services/api/sellerApi'\nimport { Spin } from 'antd'\nimport { LoadingOutlined } from '@ant-design/icons'\n\nimport numberSeparator from '../../../../helpers/validating/numberSeparator'\nimport moment from 'moment'\nimport CIcon from '@coreui/icons-react'\n\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />\nconst WidgetsDropdown = lazy(() => import('../widgets/WidgetsDropdown.js'))\n\nconst Statistic = () => {\n  const [statistics, setStatistics] = useState([])\n  const [totalAmount, setTotalAmount] = useState([])\n  const [orderCount, setOrderCount] = useState([])\n  const [listShop, setListShop] = useState([])\n  const [shopId, setShopId] = useState('')\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    getRevenueShop(shopId, { from: moment().subtract(7, 'day'), to: moment() }).then((respone) => {\n      setTotalAmount(respone.data.data.totalAmount)\n      setOrderCount(respone.data.data.orderCount)\n      setStatistics(respone.data.data.statistics)\n      setLoading(false)\n    })\n  }, [shopId])\n  useEffect(() => {\n    getShops({}).then((response) => {\n      setListShop(response.data.data)\n    })\n    if (shopId == '' || shopId == 1) {\n      getUserInformation().then((respone) => {\n        getRevenue(respone.data.data._id, { from: moment().subtract(7, 'day'), to: moment() }).then((respone) => {\n          setTotalAmount(respone.data.data.totalAmount)\n          setOrderCount(respone.data.data.orderCount)\n          setStatistics(respone.data.data.statistics)\n          setLoading(false)\n        })\n      })\n    }\n  }, [])\n\n  return (\n    <>\n      <div className=\"mb-3\" id=\"changeProduct\">\n        <CFormSelect\n          aria-label=\"Default select example\"\n          onChange={(e) => {\n            setLoading(true)\n            setShopId(e.target.value)\n          }}\n        >\n          <option value=\"1\">Chọn shop để xem</option>\n          {listShop.map((shop) => {\n            return (\n              <option value={shop._id} key={shop._id}>\n                {shop.name}\n              </option>\n            )\n          })}\n        </CFormSelect>\n      </div>\n      <Spin indicator={antIcon} spinning={loading}>\n        <CCard className=\"mb-4\">\n          <CCardBody>\n            <CRow>\n              <CCol sm={5}>\n                <h4 id=\"traffic\" className=\"card-title mb-0\">\n                  Doanh thu bán hàng\n                </h4>\n                <div className=\"small text-medium-emphasis\">Tổng doanh thu: {numberSeparator(totalAmount)} VNĐ</div>\n              </CCol>\n              <CCol sm={7} className=\"d-none d-md-block\">\n                <CButton color=\"primary\" className=\"float-end\">\n                  <CIcon icon={cilCloudDownload} />\n                </CButton>\n                <CButtonGroup className=\"float-end me-3\">\n                  {['Ngày', 'Tháng', 'Năm'].map((value) => (\n                    <CButton color=\"outline-secondary\" key={value} className=\"mx-0\" active={value === 'Ngày'}>\n                      {value}\n                    </CButton>\n                  ))}\n                </CButtonGroup>\n              </CCol>\n            </CRow>\n            <CChartLine\n              style={{ height: '300px', marginTop: '40px' }}\n              data={{\n                labels: statistics ? statistics.map((statistic) => statistic.date) : [],\n                datasets: [\n                  {\n                    label: 'Doanh thu',\n                    backgroundColor: hexToRgba(getStyle('--cui-info'), 10),\n                    borderColor: getStyle('--cui-info'),\n                    pointHoverBackgroundColor: getStyle('--cui-info'),\n                    borderWidth: 2,\n                    data: statistics ? statistics.map((statistic) => statistic.totalAmount) : [],\n                    fill: true\n                  }\n                ]\n              }}\n              options={{\n                maintainAspectRatio: false,\n                plugins: {\n                  legend: {\n                    display: false\n                  }\n                },\n                scales: {\n                  x: {\n                    grid: {\n                      drawOnChartArea: false\n                    }\n                  },\n                  y: {\n                    ticks: {\n                      beginAtZero: true,\n                      maxTicksLimit: 5,\n                      stepSize: Math.ceil(250 / 5),\n                      max: 250\n                    }\n                  }\n                },\n                elements: {\n                  line: {\n                    tension: 0.4\n                  },\n                  point: {\n                    radius: 0,\n                    hitRadius: 10,\n                    hoverRadius: 4,\n                    hoverBorderWidth: 3\n                  }\n                }\n              }}\n            />\n          </CCardBody>\n          <CCardFooter></CCardFooter>\n        </CCard>\n\n        <CCard className=\"mb-4\">\n          <CCardBody>\n            <CRow>\n              <CCol sm={5}>\n                <h4 id=\"traffic\" className=\"card-title mb-0\">\n                  Số lượng đơn hàng\n                </h4>\n                <div className=\"small text-medium-emphasis\">Tổng đơn hàng: {orderCount}</div>\n              </CCol>\n              <CCol sm={7} className=\"d-none d-md-block\">\n                <CButton color=\"primary\" className=\"float-end\">\n                  <CIcon icon={cilCloudDownload} />\n                </CButton>\n                <CButtonGroup className=\"float-end me-3\">\n                  {['Ngày', 'Tháng', 'Năm'].map((value) => (\n                    <CButton color=\"outline-secondary\" key={value} className=\"mx-0\" active={value === 'Ngày'}>\n                      {value}\n                    </CButton>\n                  ))}\n                </CButtonGroup>\n              </CCol>\n            </CRow>\n            <CChartLine\n              style={{ height: '300px', marginTop: '40px' }}\n              data={{\n                labels: statistics ? statistics.map((statistic) => statistic.date) : [],\n                datasets: [\n                  {\n                    label: 'Số đơn hàng',\n                    backgroundColor: hexToRgba(getStyle('--cui-info'), 10),\n                    borderColor: getStyle('--cui-info'),\n                    pointHoverBackgroundColor: getStyle('--cui-info'),\n                    borderWidth: 2,\n                    data: statistics ? statistics.map((statistic) => statistic.orderCount) : [],\n                    fill: true\n                  }\n                ]\n              }}\n              options={{\n                maintainAspectRatio: false,\n                plugins: {\n                  legend: {\n                    display: false\n                  }\n                },\n                scales: {\n                  x: {\n                    grid: {\n                      drawOnChartArea: false\n                    }\n                  },\n                  y: {\n                    ticks: {\n                      beginAtZero: true,\n                      maxTicksLimit: 5,\n                      stepSize: Math.ceil(250 / 5),\n                      max: 250\n                    }\n                  }\n                },\n                elements: {\n                  line: {\n                    tension: 0.4\n                  },\n                  point: {\n                    radius: 0,\n                    hitRadius: 10,\n                    hoverRadius: 4,\n                    hoverBorderWidth: 3\n                  }\n                }\n              }}\n            />\n          </CCardBody>\n          <CCardFooter></CCardFooter>\n        </CCard>\n\n        <WidgetsDropdown />\n      </Spin>\n    </>\n  )\n}\n\nexport default Statistic\n"],"sourceRoot":""}