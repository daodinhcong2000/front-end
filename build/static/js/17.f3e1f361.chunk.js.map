{"version":3,"sources":["app/seller/views/dashboard/Dashboard.js"],"names":["WidgetsDropdown","lazy","Dashboard","useState","statistics","setStatistics","totalAmount","setTotalAmount","orderCount","setOrderCount","listShop","setListShop","shopId","setShopId","useEffect","getUserInformation","then","respone","getRevenue","data","_id","from","moment","subtract","to","getShops","response","getRevenueShop","className","sm","id","color","icon","cilCloudDownload","map","value","active","style","height","marginTop","labels","statistic","date","datasets","label","backgroundColor","hexToRgba","getStyle","borderColor","pointHoverBackgroundColor","borderWidth","fill","options","maintainAspectRatio","plugins","legend","display","scales","x","grid","drawOnChartArea","y","ticks","beginAtZero","maxTicksLimit","stepSize","Math","ceil","max","elements","line","tension","point","radius","hitRadius","hoverRadius","hoverBorderWidth","onChange","e","target","shop","name"],"mappings":"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","file":"static/js/17.f3e1f361.chunk.js","sourcesContent":["import React, { lazy, useState, useEffect } from 'react'\n\nimport { CButton, CButtonGroup, CCard, CCardBody, CCardFooter, CCol, CRow } from '@coreui/react'\nimport { CChartLine } from '@coreui/react-chartjs'\nimport { getStyle, hexToRgba } from '@coreui/utils'\nimport CIcon from '@coreui/icons-react'\nimport { cilCloudDownload } from '@coreui/icons'\nimport { getUserInformation } from '../../../../services/api/customerApi'\nimport { getRevenue, getRevenueShop } from '../../../../services/api/sellerApi'\n\nimport { CFormSelect } from '@coreui/react'\nimport { getShops } from '../../../../services/api/sellerApi'\nimport moment from 'moment'\nconst WidgetsDropdown = lazy(() => import('../widgets/WidgetsDropdown.js'))\n\nconst Dashboard = () => {\n  const [statistics, setStatistics] = useState([])\n  const [totalAmount, setTotalAmount] = useState([])\n  const [orderCount, setOrderCount] = useState([])\n  const [listShop, setListShop] = useState([])\n  const [shopId, setShopId] = useState('')\n  useEffect(() => {\n    if (shopId == '' || shopId == 1) {\n      getUserInformation().then((respone) => {\n        getRevenue(respone.data.data._id, { from: moment().subtract(7, 'day'), to: moment() }).then((respone) => {\n          setTotalAmount(respone.data.data.totalAmount)\n          setOrderCount(respone.data.data.orderCount)\n          setStatistics(respone.data.data.statistics)\n        })\n      })\n    }\n  }, [shopId])\n  useEffect(() => {\n    getShops({}).then((response) => {\n      setListShop(response.data.data)\n    })\n  }, [])\n  useEffect(() => {\n    if (shopId != '' && shopId != 1) {\n      getRevenueShop(shopId, { from: moment().subtract(7, 'day'), to: moment() }).then((respone) => {\n        setTotalAmount(respone.data.data.totalAmount)\n        setOrderCount(respone.data.data.orderCount)\n        setStatistics(respone.data.data.statistics)\n      })\n    }\n  }, [shopId])\n\n  return (\n    <>\n      <CCard className=\"mb-4\">\n        <CCardBody>\n          <CRow>\n            <CCol sm={5}>\n              <h4 id=\"traffic\" className=\"card-title mb-0\">\n                Doanh thu bán hàng\n              </h4>\n              <div className=\"small text-medium-emphasis\">Tổng doanh thu: {totalAmount} VNĐ</div>\n            </CCol>\n            <CCol sm={7} className=\"d-none d-md-block\">\n              <CButton color=\"primary\" className=\"float-end\">\n                <CIcon icon={cilCloudDownload} />\n              </CButton>\n              <CButtonGroup className=\"float-end me-3\">\n                {['Ngày', 'Tháng', 'Năm'].map((value) => (\n                  <CButton color=\"outline-secondary\" key={value} className=\"mx-0\" active={value === 'Ngày'}>\n                    {value}\n                  </CButton>\n                ))}\n              </CButtonGroup>\n            </CCol>\n          </CRow>\n          <CChartLine\n            style={{ height: '300px', marginTop: '40px' }}\n            data={{\n              labels: statistics ? statistics.map((statistic) => statistic.date) : [],\n              datasets: [\n                {\n                  label: 'Doanh thu',\n                  backgroundColor: hexToRgba(getStyle('--cui-info'), 10),\n                  borderColor: getStyle('--cui-info'),\n                  pointHoverBackgroundColor: getStyle('--cui-info'),\n                  borderWidth: 2,\n                  data: statistics ? statistics.map((statistic) => statistic.totalAmount) : [],\n                  fill: true\n                }\n              ]\n            }}\n            options={{\n              maintainAspectRatio: false,\n              plugins: {\n                legend: {\n                  display: false\n                }\n              },\n              scales: {\n                x: {\n                  grid: {\n                    drawOnChartArea: false\n                  }\n                },\n                y: {\n                  ticks: {\n                    beginAtZero: true,\n                    maxTicksLimit: 5,\n                    stepSize: Math.ceil(250 / 5),\n                    max: 250\n                  }\n                }\n              },\n              elements: {\n                line: {\n                  tension: 0.4\n                },\n                point: {\n                  radius: 0,\n                  hitRadius: 10,\n                  hoverRadius: 4,\n                  hoverBorderWidth: 3\n                }\n              }\n            }}\n          />\n        </CCardBody>\n        <CCardFooter></CCardFooter>\n      </CCard>\n\n      <CCard className=\"mb-4\">\n        <CCardBody>\n          <CRow>\n            <CCol sm={5}>\n              <h4 id=\"traffic\" className=\"card-title mb-0\">\n                Số lượng đơn hàng\n              </h4>\n              <div className=\"small text-medium-emphasis\">Tổng đơn hàng: {orderCount}</div>\n            </CCol>\n            <CCol sm={7} className=\"d-none d-md-block\">\n              <CButton color=\"primary\" className=\"float-end\">\n                <CIcon icon={cilCloudDownload} />\n              </CButton>\n              <CButtonGroup className=\"float-end me-3\">\n                {['Ngày', 'Tháng', 'Năm'].map((value) => (\n                  <CButton color=\"outline-secondary\" key={value} className=\"mx-0\" active={value === 'Ngày'}>\n                    {value}\n                  </CButton>\n                ))}\n              </CButtonGroup>\n            </CCol>\n          </CRow>\n          <CChartLine\n            style={{ height: '300px', marginTop: '40px' }}\n            data={{\n              labels: statistics ? statistics.map((statistic) => statistic.date) : [],\n              datasets: [\n                {\n                  label: 'Số đơn hàng',\n                  backgroundColor: hexToRgba(getStyle('--cui-info'), 10),\n                  borderColor: getStyle('--cui-info'),\n                  pointHoverBackgroundColor: getStyle('--cui-info'),\n                  borderWidth: 2,\n                  data: statistics ? statistics.map((statistic) => statistic.orderCount) : [],\n                  fill: true\n                }\n              ]\n            }}\n            options={{\n              maintainAspectRatio: false,\n              plugins: {\n                legend: {\n                  display: false\n                }\n              },\n              scales: {\n                x: {\n                  grid: {\n                    drawOnChartArea: false\n                  }\n                },\n                y: {\n                  ticks: {\n                    beginAtZero: true,\n                    maxTicksLimit: 5,\n                    stepSize: Math.ceil(250 / 5),\n                    max: 250\n                  }\n                }\n              },\n              elements: {\n                line: {\n                  tension: 0.4\n                },\n                point: {\n                  radius: 0,\n                  hitRadius: 10,\n                  hoverRadius: 4,\n                  hoverBorderWidth: 3\n                }\n              }\n            }}\n          />\n        </CCardBody>\n        <CCardFooter></CCardFooter>\n      </CCard>\n\n      <div className=\"mb-3\" id=\"changeProduct\">\n        <CFormSelect aria-label=\"Default select example\" onChange={(e) => setShopId(e.target.value)}>\n          <option value=\"1\">Chọn shop để xem</option>\n          {listShop.map((shop) => {\n            return (\n              <option value={shop._id} key={shop._id}>\n                {shop.name}\n              </option>\n            )\n          })}\n        </CFormSelect>\n      </div>\n      <WidgetsDropdown />\n    </>\n  )\n}\n\nexport default Dashboard\n"],"sourceRoot":""}