{"version":3,"sources":["app/seller/components/Order.js","app/seller/views/orders/WaitingOrder.js"],"names":["confirm","Modal","Order","getStatus","useState","listShop","setListShop","listOrder","setListOrder","shopId","setShopId","details","setDetails","loading","setLoading","useToast","error","success","warn","info","useEffect","getShops","then","response","data","getOrders","map","i","idOrder","_id","getBadge","status","showDeleteConfirm","title","icon","style","top","okText","okType","cancelText","onOk","cancelOrder","respone","message","catch","err","clOrder","onCancel","className","onChange","e","target","value","shop","name","activePage","cleaner","clickableRows","columns","label","key","_style","width","_props","filter","sorter","color","columnFilter","columnSorter","items","itemsPerPageSelect","itemsPerPage","pagination","noItemsLabel","scopedColumns","item","customer","lastName","firstName","phone","phoneNumber","ORDER_STATUSES_MAPPING","show_details","variant","shape","size","onClick","index","position","indexOf","newDetails","slice","splice","toggleDetails","includes","visible","htmlFor","hover","scope","product","quantity","price","type","disabled","sellingAddress","xs","shippingCost","totalPrice","disable","confirmOrder","sorterValue","column","state","tableFilter","tableProps","striped","WaitingOrder"],"mappings":"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","file":"static/js/14.de19ea31.chunk.js","sourcesContent":["import React, { useState, useEffect, Suspense } from 'react'\nimport { getShops, getOrders, confirmOrder, cancelOrder } from '../../../services/api/sellerApi'\nimport { CSmartTable, CBadge, CFormSelect, CButton, CCollapse, CCardBody } from '@coreui/react-pro'\nimport { ORDER_STATUSES_MAPPING } from 'accommerce-helpers'\nimport {\n  CTableRow,\n  CTable,\n  CTableHead,\n  CTableHeaderCell,\n  CTableDataCell,\n  CTableBody,\n  CHeaderBrand,\n  CCol,\n  CFormInput,\n  CInputGroup,\n  CFormLabel,\n  CInputGroupText,\n  CRow\n} from '@coreui/react'\nimport { useToast } from '../../../contexts/toast'\nimport { Modal } from 'antd'\nimport { ExclamationCircleOutlined } from '@ant-design/icons'\n\nconst { confirm } = Modal\n\nconst Order = ({ getStatus }) => {\n  const columns = [\n    {\n      label: 'Tên người nhận hàng',\n      key: 'name',\n      _style: { width: '40%' },\n      _props: { className: 'fw-semibold' }\n    },\n    {\n      label: 'Số điện thoại',\n      key: 'phone'\n    },\n    {\n      label: 'Địa chỉ',\n      key: 'receivingAddress',\n      filter: true,\n      sorter: false,\n      _style: { width: '20%' }\n    },\n    { label: 'Trạng thái', key: 'status', _style: { width: '20%' } },\n    {\n      key: 'show_details',\n      label: '',\n      _style: { width: '1%' },\n      filter: false,\n      sorter: false,\n      _props: { color: 'primary', className: 'fw-semibold' }\n    }\n  ]\n  const [listShop, setListShop] = useState([])\n  const [listOrder, setListOrder] = useState([])\n  const [shopId, setShopId] = useState('0')\n  const [details, setDetails] = useState([])\n  const [loading, setLoading] = useState(true)\n  const { error, warn, info, success } = useToast()\n\n  useEffect(() => {\n    getShops({}).then((response) => {\n      setListShop(response.data.data)\n      setLoading(false)\n    })\n  }, [])\n  useEffect(() => {\n    if (shopId != '0') {\n      getOrders(shopId, getStatus).then((response) => {\n        response.data.data.map((data, i) => {\n          data.idOrder = data._id\n        })\n        setListOrder(response.data.data)\n        setLoading(false)\n      })\n    }\n  }, [shopId, loading])\n  const getBadge = (status) => {\n    switch (status) {\n      case 'Delivered':\n        return 'success'\n      case 'Waiting for seller confirm':\n        return 'warning'\n      case 'In transit':\n        return 'info'\n      case 'Cancelled by customer':\n        return 'danger'\n      case 'Cancelled by seller':\n        return 'danger'\n      default:\n        return 'primary'\n    }\n  }\n  const toggleDetails = (index) => {\n    const position = details.indexOf(index)\n    let newDetails = details.slice()\n    if (position !== -1) {\n      newDetails.splice(position, 1)\n    } else {\n      newDetails = [...details, index]\n    }\n    setDetails(newDetails)\n  }\n\n  const cfOrder = (idOrder) => {\n    confirmOrder(shopId, idOrder)\n      .then((respone) => {\n        success(respone.data.message)\n        setLoading(false)\n      })\n      .catch((err) => {\n        error(err.response.data.message)\n      })\n  }\n\n  const clOrder = (idOrder) => {\n    cancelOrder(shopId, idOrder)\n      .then((respone) => {\n        success(respone.data.message)\n        setLoading(false)\n      })\n      .catch((err) => {\n        error(err.response.data.message)\n      })\n  }\n  const showDeleteConfirm = (idOrder) => {\n    confirm({\n      title: 'Bạn chắc chắn hủy đơn hàng này?',\n      icon: <ExclamationCircleOutlined />,\n      style: { top: 200 },\n      okText: 'Đồng ý',\n      okType: 'danger',\n      cancelText: 'Quay lại',\n      onOk() {\n        clOrder(idOrder)\n        setLoading(true)\n      },\n      onCancel() {\n        setLoading(false)\n      }\n    })\n  }\n\n  return (\n    <div>\n      <div className=\"mb-3\">\n        <CFormSelect\n          aria-label=\"Default select example\"\n          onChange={(e) => {\n            setShopId(e.target.value)\n            setLoading(true)\n          }}\n        >\n          <option value=\"0\">Chọn shop</option>\n          {listShop.map((shop) => {\n            return (\n              <option value={shop._id} key={shop._id}>\n                {shop.name}\n              </option>\n            )\n          })}\n        </CFormSelect>\n      </div>\n      <CSmartTable\n        activePage={3}\n        cleaner\n        clickableRows\n        columns={columns}\n        columnFilter\n        columnSorter\n        loading={loading}\n        items={listOrder}\n        itemsPerPageSelect\n        itemsPerPage={5}\n        pagination\n        noItemsLabel=\"Chưa có đơn hàng nào chờ xác nhận.\"\n        scopedColumns={{\n          name: (item) => (\n            <td>\n              {item.customer.lastName} {item.customer.firstName}\n            </td>\n          ),\n          phone: (item) => <td>{item.customer.phoneNumber}</td>,\n          status: (item) => (\n            <td>\n              <CBadge color={getBadge(item.status)}>{ORDER_STATUSES_MAPPING[item.status]}</CBadge>\n            </td>\n          ),\n          show_details: (item) => {\n            return (\n              <td className=\"py-2\">\n                <CButton\n                  color=\"primary\"\n                  variant=\"outline\"\n                  shape=\"square\"\n                  size=\"sm\"\n                  onClick={() => {\n                    toggleDetails(item._id)\n                  }}\n                >\n                  {details.includes(item._id) ? 'Hide' : 'Show'}\n                </CButton>\n              </td>\n            )\n          },\n          details: (item) => {\n            return (\n              <CCollapse visible={details.includes(item._id)}>\n                <CCardBody>\n                  <CHeaderBrand htmlFor=\"exampleFormControlInput1\">Danh sách sản phẩm của đơn hàng</CHeaderBrand>\n                  <CTable hover>\n                    <CTableHead>\n                      <CTableRow>\n                        <CTableHeaderCell scope=\"col\">Tên sản phẩm</CTableHeaderCell>\n                        <CTableHeaderCell scope=\"col\">Size</CTableHeaderCell>\n                        <CTableHeaderCell scope=\"col\">Số lượng</CTableHeaderCell>\n                        <CTableHeaderCell scope=\"col\">Giá sản phẩm</CTableHeaderCell>\n                      </CTableRow>\n                    </CTableHead>\n                    {item.items.map((data, i) => {\n                      return (\n                        <CTableBody>\n                          <CTableRow>\n                            <CTableDataCell>{data.product.name}</CTableDataCell>\n                            <CTableDataCell>{data.size}</CTableDataCell>\n                            <CTableDataCell>{data.quantity}</CTableDataCell>\n                            <CTableDataCell>{data.price} VNĐ</CTableDataCell>\n                          </CTableRow>\n                        </CTableBody>\n                      )\n                    })}\n                  </CTable>\n                  <div className=\"mb-3\">\n                    <CFormLabel htmlFor=\"exampleFormControlInput1\">Nơi lấy hàng</CFormLabel>\n                    <CFormInput type=\"text\" disabled value={item.sellingAddress} />\n                  </div>\n                  <div className=\"mb-3\">\n                    <CRow>\n                      <CCol xs>\n                        <CFormLabel htmlFor=\"exampleFormControlInput1\">Giá vận chuyển</CFormLabel>\n                        <CInputGroup>\n                          <CFormInput type=\"text\" disabled value={item.shippingCost} />\n                          <CInputGroupText>VNĐ</CInputGroupText>\n                        </CInputGroup>\n                      </CCol>\n                      <CCol xs>\n                        <CFormLabel htmlFor=\"exampleFormControlInput1\">Tổng giá trị đơn hàng</CFormLabel>\n                        <CInputGroup>\n                          <CFormInput type=\"text\" disabled value={item.shippingCost + item.totalPrice} />\n                          <CInputGroupText>VNĐ</CInputGroupText>\n                        </CInputGroup>\n                      </CCol>\n                    </CRow>\n                  </div>\n                  {item.status == 'Waiting for seller confirm' ? (\n                    <div className=\"mb-3\">\n                      <CRow>\n                        <CCol xs>\n                          <CButton\n                            disable={loading}\n                            color=\"success\"\n                            onClick={() => {\n                              setLoading(true)\n                              cfOrder(item.idOrder)\n                            }}\n                          >\n                            {' '}\n                            Xác nhận{' '}\n                          </CButton>\n                        </CCol>\n                        <CCol>\n                          <CButton\n                            disable={loading}\n                            color=\"danger\"\n                            onClick={() => {\n                              showDeleteConfirm(item.idOrder)\n                            }}\n                          >\n                            {' '}\n                            Hủy{' '}\n                          </CButton>\n                        </CCol>\n                      </CRow>\n                    </div>\n                  ) : (\n                    ''\n                  )}\n                </CCardBody>\n              </CCollapse>\n            )\n          }\n        }}\n        sorterValue={{ column: 'name', state: 'asc' }}\n        tableFilter\n        tableProps={{\n          striped: true,\n          hover: true\n        }}\n      />\n    </div>\n  )\n}\n\nexport default Order\n","import Order from '../../components/Order'\n\nconst WaitingOrder = () => {\n  return (\n    <div>\n      <Order getStatus={{ status: 'Waiting for seller confirm' }} />\n    </div>\n  )\n}\n\nexport default WaitingOrder\n"],"sourceRoot":""}